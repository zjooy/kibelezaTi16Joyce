<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblLogin.Text" xml:space="preserve">
    <value>1. Digite o nome do Usuário Cadastrado;

2. Digite a senha desse usuário;
 

Caso o Usuário ou a Senha seja digitada errada por 3x o sistema será bloqueado.

Em caso de bloqueio, entrar em contato com o Desenvolvedor do sistema.
</value>
  </data>
  <data name="lblMenu.Text" xml:space="preserve">
    <value>Data, Hora e Mensagem são gerados automaticamente.

1. Botão Cliente: Abre a tela com lista de clientes cadastrados no sistema;

2. Botão Funcionário: Abre a tela com a lista de funcionários cadastrados no sistema;

3.Botão Empresa: Abre a tela com a lista de empresas(matriz e filiais) cadastradas no sistema;

4. Botão Serviço: Abre a tela com lista de serviços cadastrados no sistema;

5. Botão Relatório Abre a lista de relatórios com base nos filtros escolhidos;

6. Botão Sobre: Abre a lista de informações sobre o sistema;

7. Botão Ajuda: Abre está guia sobre as funcionalidades disponíveis no sistema;</value>
  </data>
  <data name="lblEmpresa.Text" xml:space="preserve">
    <value>Na janela empresa é possível filtrar empresas cadastradas no sistema e cadastrar novas empresas


1.No campo empresa é possivel buscar as empresas atráves do seu nome;

2. No campo Filtro é possível buscar empresas de acordo com sua situação (ATIVA, INATIVA ou TODAS)

3. Botão cadastrar: leva para uma nova guia onde é possível cadastrar novas empresas;

4. Botão alterar: altera informações referentes a empresa que já é cadastrada no sistema;

5. Botão excluir: excluí uma empresa cadastrada no sistema.</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Na janela funcionário é possível filtrar funcionarios cadastrados no sistema e cadastrar novos funcionários


1.No campo Funcionário é possivel buscar os funcionários atráves do seu nome;

2. No campo status é possível buscar funcionários de acordo com sua situação (ATIVO, INATIVO ou TODAS)

3. Botão cadastrar: leva para uma nova guia onde é possível cadastrar novos funcionários;

4. Botão alterar: altera informações referentes ao funcionário que já é cadastrada no sistema;

5. Botão excluir: excluí um funcionários que é cadastrado no sistema.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Na janela cliente é possível filtrar os clientes cadastrados no sistema e cadastrar novos clientes


1.No campo cliente é possivel buscar pelos clientes atráves do seu nome;

2. No campo status é possível buscar clientes de acordo com sua situação (ATIVO, INATIVO ou TODOS)

3. Botão cadastrar: leva para uma nova guia onde é possível cadastrar novos clientes;

4. Botão alterar: altera informações referentes aos clientesque já é cadastrada no sistema;

5. Botão excluir: excluí um cliente que é cadastrado no sistema.</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Na janela de serviço é possível filtrar os serviços cadastrados no sistema e cadastrar novos serviços


1.No campo serviço é possivel buscar pelos serviços atráves do seu nome;

2. No campo status é possível buscar serviços de acordo com sua situação (ATIVO, INATIVO ou TODOS)

3. Botão cadastrar: leva para uma nova guia onde é possível cadastrar novos serviços;

4. Botão alterar: altera informações referentes aos serviços que já são cadastrados no sistema;

5. Botão excluir: excluí um serviço que é cadastrado no sistema.</value>
  </data>
  <data name="lblRelatorio.Text" xml:space="preserve">
    <value>Na janela de Relatório é possível filtrar os relatórios de acordo com o filtro escolhido

1. Tabela: Escolha Sobre quem deseja escrever ou buscar o relatório: Cliente, Funcionário ou empresa;

2. Filtro: Defina melhor sua busca utilizando os filtros (ATIVO, INATIVO, TODOS)</value>
  </data>
</root>